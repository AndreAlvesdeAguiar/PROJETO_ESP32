#include <DHT.h>
#include <MQ135.h>
#include <WiFi.h>
#include <WebServer.h>
#include <ArduinoJson.h>

const char* SSID = "Okura&Aguiar";
const char* PWD = "*welcome03";

const uint8_t MOISTURE_PIN_1 = 36;
const uint8_t MOISTURE_PIN_2 = 39;
const uint8_t GAS_PIN = 34;
const uint8_t DHT_PIN = 25;

const uint8_t DHTTYPE = DHT22; 

DHT dht(DHT_PIN, DHTTYPE);
MQ135 gasSensor = MQ135(GAS_PIN);

double temperature, humidity, moisture1, moisture2, mq135, ppm, ppm2, co2, co2_2;

WebServer server(80);

void setup_routing() {
  
  server.on("/temperature", HTTP_GET, []() {
    DynamicJsonDocument jsonDocument(200);
    double temperature = dht.readTemperature();
    if (!isnan(temperature)) {
      jsonDocument["type"] = "temperature";
      jsonDocument["value"] = temperature;
      jsonDocument["unit"] = "°C";
    } else {
      jsonDocument["error"] = "Failed to read temperature";
    }
    String response;
    serializeJson(jsonDocument, response);
    server.send(200, "application/json", response);
  });

  server.on("/humidity", HTTP_GET, []() {
    DynamicJsonDocument jsonDocument(200);
    jsonDocument["type"] = "humidity";
    jsonDocument["value"] = dht.readHumidity();
    jsonDocument["unit"] = "%";
    String response;
    serializeJson(jsonDocument, response);
    server.send(200, "application/json", response);
  });

  /*   
   server.on("/humidity", []() {
    server.send(200, "application/json", "{\"type\":\"humidity\",\"value\":" + String(humidity) + ",\"unit\":\"%\"}");
  });
  */
  
  server.on("/moisture1", HTTP_GET, []() {
   DynamicJsonDocument jsonDocument(200);
    int moisture = analogRead(MOISTURE_PIN_1);
      jsonDocument["type"] = "moisture";
      jsonDocument["value"] = moisture;
      jsonDocument["unit"] = "%";
    String response;
    serializeJson(jsonDocument, response);
    server.send(200, "application/json", response);
  });

  server.on("/moisture2", HTTP_GET, []() {
     DynamicJsonDocument jsonDocument(200);
    int moisture = analogRead(MOISTURE_PIN_2);
    //if (moisture >= 0 && moisture <= 1023) {
      jsonDocument["type"] = "moisture";
      jsonDocument["value"] = moisture;
      jsonDocument["unit"] = "%";
    //} else {
    //  jsonDocument["error"] = "Failed to read moisture 2";
    //}
    String response;
    serializeJson(jsonDocument, response);
    server.send(200, "application/json", response);
  });
  
  server.on("/co2", HTTP_GET, []() {
   DynamicJsonDocument jsonDocument(200);
    int ppm = gasSensor.getPPM();
    //if (ppm >= 0) {
      jsonDocument["type"] = "co2";
      jsonDocument["value"] = ppm;
      jsonDocument["unit"] = "ppm";
    //} else {
    //  jsonDocument["error"] = "Failed to read CO2";
   // }
    String response;
    serializeJson(jsonDocument, response);
    server.send(200, "application/json", response);
  });

  server.on("/co2_2", HTTP_GET, []() {
   DynamicJsonDocument jsonDocument(200);
    int ppm2 = analogRead(GAS_PIN);
    //if (ppm >= 0) {
      jsonDocument["type"] = "co2";
      jsonDocument["value"] = ppm2;
      jsonDocument["unit"] = "ppm";
    //} else {
     // jsonDocument["error"] = "Failed to read CO2";
    //}
    String response;
    serializeJson(jsonDocument, response);
    server.send(200, "application/json", response);
  });
  
  server.on("/data", HTTP_GET, []() {
   DynamicJsonDocument jsonDocument(2000);
    jsonDocument["temperature"]["type"] = "temperature";
    jsonDocument["temperature"]["value"] = temperature;
    jsonDocument["temperature"]["unit"] = "°C";
    jsonDocument["humidity"]["type"] = "humidity";
    jsonDocument["humidity"]["value"] = humidity;
    jsonDocument["humidity"]["unit"] = "%";
    /*jsonDocument["moisture1"]["type"] = "moisture1";
    jsonDocument["moisture1"]["value"] = moisture1;
    jsonDocument["moisture1"]["unit"] = "%";
    jsonDocument["moisture2"]["type"] = "moisture2";
    jsonDocument["moisture2"]["value"] = moisture2;
    jsonDocument["moisture2"]["unit"] = "%";
    jsonDocument["co2"]["type"] = "co2";
    jsonDocument["co2"]["value"] = ppm;
    jsonDocument["co2"]["unit"] = "ppm";
    jsonDocument["co2_2"]["type"] = "co2_2";
    jsonDocument["co2_2"]["value"] = ppm2;
    jsonDocument["co2_2"]["unit"] = "X";*/
    String response;
    serializeJson(jsonDocument, response);
    server.send(200, "application/json", response);
  });
  


  server.begin();
}

void read_sensor_data(void * parameter) {
  for (;;) {
    double temperature = dht.readTemperature();
    double umidade = dht.readHumidity();
    double moisture1 = analogRead(MOISTURE_PIN_1);
    double moisture2 = analogRead(MOISTURE_PIN_2);
    double mq135 = analogRead(GAS_PIN);
    
    vTaskDelay(pdMS_TO_TICKS(60000));
  }
}

void setup_task() {
  xTaskCreate(
    read_sensor_data,
    "Read sensor data",
    1000,
    NULL,
    1,
    NULL
  );
}


void setup() {
  Serial.begin(115200);
  dht.begin();
  
  WiFi.begin(SSID, PWD);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }

  setup_task(); // Setup sensor data reading task
  setup_routing(); // Setup web server routing

  Serial.println(WiFi.localIP());
}

void loop() {
  server.handleClient();
}
