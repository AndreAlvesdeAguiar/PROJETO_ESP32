#include <WiFi.h>
//------------------------------------------------------------------------
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_Sensor.h>
//------------------------------------------------------------------------
#include <DHT.h>
#define DHTTYPE DHT22   // DHT 11

// DHT Sensor
const int DHTPin = 25;
// Initialize DHT sensor.
DHT dht(DHTPin, DHTTYPE);

// Temporary variables
static char celsiusTemp[7];
static char fahrenheitTemp[7];
static char humidityTemp[7];
static char moisture1[7];
static char moisture2[7];
static char co2[7];


// Client variables
char linebuf[80];
int charcount = 0;

//------------------------------------------------------------------------
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);
//------------------------------------------------------------------------

// Replace with your network credentials
const char* ssid = "Okura&Aguiar";
const char* password = "*welcome03";

// Set web server port number to 80
WiFiServer server(80);

// Variable to store the HTTP request
String header;

// Auxiliar variables to store the current output state
//String output12State = "off";
String output12State = "off";
String output13State = "off";
String output19State = "off";
String output27State = "off";


// Assign output variables to GPIO pins
//const int output12 = 12;
const int output12 = 12;
const int output13 = 13;
const int output19 = 19;
const int output27 = 27;

// Current time
unsigned long currentTime = millis();
// Previous time
unsigned long previousTime = 0;
// Define timeout time in milliseconds (example: 2000ms = 2s)
const long timeoutTime = 2000;

void setup() {
  dht.begin();
  Serial.begin(115200);

  //------------------------------------------------------------------------
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }
  delay(2000);
  display.clearDisplay();
  display.setTextColor(WHITE);
  //------------------------------------------------------------------------

  // Initialize the output variables as outputs
 // pinMode(output12, OUTPUT);
  pinMode(output12, OUTPUT);
  pinMode(output13, OUTPUT);
  pinMode(output19, OUTPUT);
  pinMode(output27, OUTPUT);
  // Set outputs to LOW
  //digitalWrite(output12, LOW);
  digitalWrite(output12, LOW);
  digitalWrite(output13, LOW);
  digitalWrite(output19, LOW);
  digitalWrite(output27, LOW);
  

  // Connect to Wi-Fi network with SSID and password
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  // Print local IP address and start web server
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  server.begin();

  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 10);
  display.println("IP");
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0, 20);
  display.print(WiFi.localIP());
  display.display();
  delay(2000);
  display.clearDisplay();
}

void loop() {
  WiFiClient client = server.available();

  //-----------------------------------------------------------------------
  //------------------------------------------------------------------------

  if (client) {                             // If a new client connects,
    currentTime = millis();
    previousTime = currentTime;
    memset(linebuf, 0, sizeof(linebuf));
    charcount = 0;
    boolean currentLineIsBlank = true;
    Serial.println("New Client.");          // print a message out in the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected() && currentTime - previousTime <= timeoutTime) {  // loop while the client's connected
      currentTime = millis();
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        header += c;
        linebuf[charcount] = c;
        if (charcount < sizeof(linebuf) - 1) charcount++;
        // if you've gotten to the end of the line (received a newline
        // character) and the line is blank, the http request has ended,
        // so you can send a reply
        if (c == '\n'&& currentLineIsBlank) {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
          float c2 = analogRead(34);
          float m1 = analogRead(36);
          float m2 = analogRead(39);
          // Read temperature as Celsius (the default)
          float t = dht.readTemperature();
          float h = dht.readHumidity();

          // Read temperature as Fahrenheit (isFahrenheit = true)
          // Check if any reads failed and exit early (to try again).
      
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();

            // turns the GPIOs on and off
            if (header.indexOf("GET /12/on") >= 0) {
              Serial.println("GPIO 12 on");
              output12State = "on";
              digitalWrite(output12, HIGH);
            } else if (header.indexOf("GET /12/off") >= 0) {
              Serial.println("GPIO 12 off");
              output12State = "off";
              digitalWrite(output12, LOW);
            } else if (header.indexOf("GET /13/on") >= 0) {
              Serial.println("GPIO 13 on");
              output13State = "on";
              digitalWrite(output13, HIGH);
            } else if (header.indexOf("GET /13/off") >= 0) {
              Serial.println("GPIO 13 off");
              output13State = "off";
              digitalWrite(output13, LOW);
            } else if (header.indexOf("GET /19/on") >= 0) {
              Serial.println("GPIO 19 on");
              output19State = "on";
              digitalWrite(output19, HIGH);
            } else if (header.indexOf("GET /19/off") >= 0) {
              Serial.println("GPIO 19 off");
              output19State = "off";
              digitalWrite(output19, LOW);
            } else if (header.indexOf("GET /27/on") >= 0) {
              Serial.println("GPIO 27 on");
              output27State = "on";
              digitalWrite(output27, HIGH);
            } else if (header.indexOf("GET /27/off") >= 0) {
              Serial.println("GPIO 27 off");
              output27State = "off";
              digitalWrite(output27, LOW);
            }
         

            // Display the HTML web page
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" http-equiv=\"refresh\" content=\"2\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            // CSS to style the on/off buttons -----
            //------------------------------------------------------------------------
            //client.print("<http-equiv=\"refresh\" content=\"2\">");
            client.println("<link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css'><script src='https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js'></script><script src='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js'></script>");
            client.println("<title>VBOX</title></head><body>");
            client.println("<div class='container-fluid'>");
            client.println("<div class='row'>");
            client.println("<div class='col-md-12'>");
            client.println("<h1>Webserver ESP32</h1>");
            client.println("<h3>Controle</h3>");
            client.println("<ul class='nav nav-pills'>");
            client.println("<li class='active'>");
            client.println("<a href='/'> <span class='badge pull-right'>");
            //----------------------------
            client.println(t);
            client.println("</span> Temperatura</a>");
            client.println("</li><li>");
            client.println("<li class='active'>");
            client.println("<a href='/'> <span class='badge pull-right'>");
            client.println(h);
            client.println("</span> Umidade</a>");
            client.println("</li><li>");
            client.println("<li class='active'>");
            client.println("<a href='/'> <span class='badge pull-right'>");
            client.println(m1);
            client.println("</span> Moisture1</a>");
            client.println("</li><li>");
            client.println("<li class='active'>");
            client.println("<a href='/'> <span class='badge pull-right'>");
            client.println(m2);
            client.println("</span> Moisture2</a>");
            client.println("</li><li>");
            client.println("<li class='active'>");
            client.println("<a href='/'> <span class='badge pull-right'>");
            client.println(c2);
            client.println("</span> Co2</a>");
            client.println("</li><li>");
            client.println("<li class='active'>");
            client.println("<a href='/'> <span class='badge pull-right'>");
            client.println("</ul>");
            //----------------------------
            client.println("<table class='table'>");  // Tableau des relevés
            client.println("<thead><tr><th>Item</th><th>Unidade</th><th>Valor</th></tr></thead>"); //Entête
            client.println("<tbody>");  // Contenu du tableau
            client.println("<tr><td>DHT22</td><td>Temperatura</td><td>"); // Première ligne : température
            client.println(t);
            client.println("&degC</td><td>");
           // client.println("-</td></tr>");
            client.println("<tr><td>DHT22</td><td>Umidade do ar</td><td>"); // 2nd ligne : Humidité
            client.println(h);
            client.println("%</td><td>");
            //client.println("-</td></tr>");
            client.println("<tr><td>Moisture</td><td>Umidade Solo1</td><td>"); // 3ème ligne : PA (BMP180)
            client.println(m1);
            client.println("%</td><td>");
            //client.println("-</td></tr>");
            client.println("<tr><td>Moisture</td><td>Umidade Solo2</td><td>"); // 3ème ligne : PA (BMP180)
            client.println(m2);
            client.println("%</td><td>");
            //client.println("-</td></tr>");
            client.println("<tr><td>MQ135</td><td>Co2</td><td>"); // 3ème ligne : PA (BMP180)
            client.println(c2);
            client.println("%</td><td>");
            
           // client.println("</td></tr>");
            client.println("</tbody></table>");

            //------------------------------------------------------------------------
            // Feel free to change the background-color and font-size attributes to fit your preferences
            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button { background-color: #4CAF50; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println(".button2 {background-color: #555555;}</style></head>");

            // Web Page Heading
            client.println("<body><h1>Ativar perifericos</h1>");

            // Display current state, and ON/OFF buttons for GPIO 26
            client.println("<p>GPIO 12 - State " + output12State + "</p>");
            // If the output26State is off, it displays the ON button
            if (output12State == "off") {
              client.println("<p><a href=\"/12/on\"><button class=\"button\">ON</button></a></p>");
            } else {
              client.println("<p><a href=\"/12/off\"><button class=\"button button2\">OFF</button></a></p>");
            } 

            // Display current state, and ON/OFF buttons for GPIO 27
            client.println("<p>GPIO 13 - State " + output13State + "</p>");
            // If the output27State is off, it displays the ON button
            if (output13State == "off") {
              client.println("<p><a href=\"/13/on\"><button class=\"button\">ON</button></a></p>");
            } else {
              client.println("<p><a href=\"/13/off\"><button class=\"button button2\">OFF</button></a></p>");
            }

            client.println("<p>GPIO 19 - State " + output19State + "</p>");
            // If the output12State is off, it displays the ON button
            if (output19State == "off") {
              client.println("<p><a href=\"/19/on\"><button class=\"button\">ON</button></a></p>");
            } else {
              client.println("<p><a href=\"/19/off\"><button class=\"button button2\">OFF</button></a></p>");
            } 

            
            client.println("<p>GPIO 27 - State " + output27State + "</p>");
            // If the output12State is off, it displays the ON button
            if (output27State == "off") {
              client.println("<p><a href=\"/27/on\"><button class=\"button\">ON</button></a></p>");
            } else {
              client.println("<p><a href=\"/27/off\"><button class=\"button button2\">OFF</button></a></p>");
            } 

            client.println("</body></html>");

            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          } else { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }
}
